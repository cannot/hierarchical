<?php

namespace samyapp\hierarchical;

class Builder
{
	public $tree = null;

	/**
	 * @var string The name of the key to use to indicate the depth of each node in input data
	 */
	public $inputDepthKey = 'depth';

	/**
	 * @var int The maximum depth to include nodes up to
	 */
	public $maxDepth = 0xffffff;

	/**
	 * Build a tree from an iterable collection of array data.
	 * Each entry in the collection must represent a node in the tree,
	 * and entries must be in the order generated by a depth-first walk of the tree.
	 * e.g. 
	 * -1
	 *  -1.1
	 *   -1.1.1
	 *   - 1.1.2
	 *  -1.2
	 * -2
	 * 
	 */
	public function build($iterable)
	{
		$this->tree = new Node();
		$prev_depth = 0;
		$stack = array($this->tree);
		foreach( $iterable as $item) {
			$depth = $item[$this->inputDepthKey];
			if ($depth > $this->maxDepth) {
				continue;
			}
			if ($depth == $prev_depth) { // sibling 
				$stack[$depth-1]->children[] = $stack[$depth] = new Node($item);
			}
			else if ($depth < $prev_depth) {
				$stack[$depth-1]->children[] = $stack[$depth] = new Node($item);
			}
			else { // descendant of previous line
				$stack[$prev_depth]->children[] = $stack[$depth] = new Node($item);
			}
			$prev_depth = $depth;
		}
	} 
}


